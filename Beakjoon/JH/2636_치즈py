from collections import deque
from copy import deepcopy
import sys
input = sys.stdin.readline
sys.setrecursionlimit(1000000)

N, M = map(int, input().split())
graph = [list(map(int, input().split())) for _ in range(N)]
dx, dy = [-1,0,1,0], [0,1,0,-1]

def is_melted(x,y):
    for i in range(4):
        nx, ny = x+dx[i], y+dy[i]
        if graph[nx][ny]==-1:
            return True
    return False

def check_air(graph,x,y):
    graph[x][y] = -1
    for i in range(4):
        nx, ny = x+dx[i], y+dy[i]
        if (0<=nx<N and 0<=ny<M and graph[nx][ny]==0):
            check_air(graph,nx,ny)

cheese = deque()
for i in range(N):
    for j in range(M):
        if graph[i][j]==1:
            cheese.append((i,j))
        if i==0 or j==0 or i==N-1 or j==M-1:
            check_air(graph,i,j)

cnt = 0
while cheese:
    cnt +=1
    last_size = len(cheese)

    copied_graph = deepcopy(graph)
    for _ in range(last_size):
        x,y = cheese.popleft()
        if is_melted(x,y):
            check_air(copied_graph,x,y)
        else:
            cheese.append((x,y))
    graph = copied_graph

print(cnt)
print(last_size)
